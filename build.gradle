plugins {
    id "java-library"
    id "io.qameta.allure" version "2.8.1"
    id "io.freefair.lombok" version "6.0.0-m2"
}

repositories {
    mavenCentral()
}

ext {
    allureVersion = "2.22.0"
    selenideVersion = "6.15.0"
    junitVersion = "5.9.3"
}

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true // обработка аннотации @step
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.assertj:assertj-core:3.24.2",
            "org.aspectj:aspectjweaver:1.9.19",
            "org.slf4j:slf4j-simple:2.0.5",
            "org.aeonbits.owner:owner:1.0.12",
            "com.github.javafaker:javafaker:1.0.2",
            "com.codeborne:selenide-selenoid:6.15.0",
            "io.rest-assured:rest-assured:5.3.1",
            "org.codehaus.jackson:jackson-core-asl:1.9.13"
    )
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    group = "verification"
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task regressionTests(type: Test) {
    useJUnitPlatform {
        includeTags("Regression")
    }
}

task apiTests(type: Test) {
    useJUnitPlatform {
        includeTags("API")
    }
}

task uiTests(type: Test) {
    useJUnitPlatform {
        includeTags("UI")
    }
}